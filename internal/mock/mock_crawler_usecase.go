// Code generated by MockGen. DO NOT EDIT.
// Source: ./crawler_usecase.go

// Package mock is a generated GoMock package.
package mock

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockCrawlerUseCase is a mock of CrawlerUseCase interface
type MockCrawlerUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockCrawlerUseCaseMockRecorder
}

// MockCrawlerUseCaseMockRecorder is the mock recorder for MockCrawlerUseCase
type MockCrawlerUseCaseMockRecorder struct {
	mock *MockCrawlerUseCase
}

// NewMockCrawlerUseCase creates a new mock instance
func NewMockCrawlerUseCase(ctrl *gomock.Controller) *MockCrawlerUseCase {
	mock := &MockCrawlerUseCase{ctrl: ctrl}
	mock.recorder = &MockCrawlerUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCrawlerUseCase) EXPECT() *MockCrawlerUseCaseMockRecorder {
	return m.recorder
}

// Start mocks base method
func (m *MockCrawlerUseCase) Start(url string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Start", url)
}

// Start indicates an expected call of Start
func (mr *MockCrawlerUseCaseMockRecorder) Start(url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockCrawlerUseCase)(nil).Start), url)
}

// Stop mocks base method
func (m *MockCrawlerUseCase) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop
func (mr *MockCrawlerUseCaseMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockCrawlerUseCase)(nil).Stop))
}
