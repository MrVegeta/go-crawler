// Code generated by MockGen. DO NOT EDIT.
// Source: ./crawler_ctrl.go

// Package mock is a generated GoMock package.
package mock

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockCrawlerCtrl is a mock of CrawlerCtrl interface
type MockCrawlerCtrl struct {
	ctrl     *gomock.Controller
	recorder *MockCrawlerCtrlMockRecorder
}

// MockCrawlerCtrlMockRecorder is the mock recorder for MockCrawlerCtrl
type MockCrawlerCtrlMockRecorder struct {
	mock *MockCrawlerCtrl
}

// NewMockCrawlerCtrl creates a new mock instance
func NewMockCrawlerCtrl(ctrl *gomock.Controller) *MockCrawlerCtrl {
	mock := &MockCrawlerCtrl{ctrl: ctrl}
	mock.recorder = &MockCrawlerCtrlMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCrawlerCtrl) EXPECT() *MockCrawlerCtrlMockRecorder {
	return m.recorder
}

// Crawl mocks base method
func (m *MockCrawlerCtrl) Crawl(url string) []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Crawl", url)
	ret0, _ := ret[0].([]string)
	return ret0
}

// Crawl indicates an expected call of Crawl
func (mr *MockCrawlerCtrlMockRecorder) Crawl(url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Crawl", reflect.TypeOf((*MockCrawlerCtrl)(nil).Crawl), url)
}

// Extract mocks base method
func (m *MockCrawlerCtrl) Extract(url string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Extract", url)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Extract indicates an expected call of Extract
func (mr *MockCrawlerCtrlMockRecorder) Extract(url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Extract", reflect.TypeOf((*MockCrawlerCtrl)(nil).Extract), url)
}
